name: 'Cargo build and test'

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file securely
        run: |
          echo "TEST_SECRET=${{ secrets.TEST_SECRET }}" > src-tauri/.env

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install SQLite (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          choco install sqlite --force
          refreshenv

      - name: Verify SQLite Installation (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          dir "C:\ProgramData\chocolatey\lib\SQLite\tools"
          "C:\ProgramData\chocolatey\lib\SQLite\tools\sqlite3.exe" --version

      - name: Install Visual Studio Build Tools (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          choco install visualstudio2022buildtools --params "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended"

      - name: Generate sqlite3.def (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: cmd
        working-directory: C:\ProgramData\chocolatey\lib\SQLite\tools
        run: |
          if not exist sqlite3.def (
            dlltool -z sqlite3.def -D sqlite3.dll
          )
          type sqlite3.def

      - name: Generate sqlite3.lib (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: cmd
        working-directory: C:\ProgramData\chocolatey\lib\SQLite\tools
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib
          dir sqlite3.lib

      - name: Set SQLite environment variables (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV
          echo "SQLITE3_INCLUDE_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV
          echo "LIBSQLITE3_LINK_LIB=C:\ProgramData\chocolatey\lib\SQLite\tools\sqlite3.lib" >> $GITHUB_ENV

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: bun install

      - name: Run Rust tests with debug output
        working-directory: ./src-tauri
        env:
          RUST_BACKTRACE: 1
        run: |
          if [ "${{ matrix.platform }}" = "windows-latest" ]; then
            echo "SQLite Environment Variables:"
            echo "SQLITE3_LIB_DIR: $SQLITE3_LIB_DIR"
            echo "SQLITE3_INCLUDE_DIR: $SQLITE3_INCLUDE_DIR"
            echo "LIBSQLITE3_LINK_LIB: $LIBSQLITE3_LINK_LIB"
            dir "C:\ProgramData\chocolatey\lib\SQLite\tools"
          fi
          cargo test ${{ matrix.args }} --lib --nocapture

      - name: Clean up .env file
        run: rm src-tauri/.env
